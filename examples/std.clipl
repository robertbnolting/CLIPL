fn getDigits(int n) -> int
{
	if (n < 10) {
		return 1;
	}
	if (n < 100) {
		return 2;
	}
	if (n < 1000) {
		return 3;
	}
	if (n < 10000) {
		return 4;
	}
	if (n < 100000) {
		return 5;
	}
	if (n < 1000000) {
		return 6;
	}
	if (n < 10000000) {
		return 7;
	}
	if (n < 100000000) {
		return 8;
	}
	if (n < 1000000000) {
		return 9;
	}

	return 10;
}

fn range(int start, int end) -> int[]
{
	int arr[10] = [];

	while (end != 0) {
		arr = arr + start;
		start = start + 1;
		end = end - 1;
	}

	return arr;
}

fn reverseString(string s) -> string
{
	string ret = "";

	for (string c : s) {
		ret = c + ret;
	}

	return ret;
}

fn intToStr(int num) -> string
{
	int ndigits = getDigits(num);
	string ret = "" : 10;
	int n;

	while (ndigits > 0) {
		n = num % 10;

		if (n == 0) {
		  ret = ret + "0";
		} else {
		  if (n == 1) {
		    ret = ret + "1";
		  } else {
		    if (n == 2) {
		      ret = ret + "2";
		    } else {
		      if (n == 3) {
			ret = ret + "3";
		      } else {
			if (n== 4) {
			  ret = ret + "4";
			} else {
			  if (n == 5) {
			    ret = ret + "5";
			  } else {
			    if (n == 6) {
			      ret = ret + "6";
			    } else {
			      if (n == 7) {
				ret = ret + "7";
			      } else {
				if (n == 8) {
				  ret = ret + "8";
				} else {
				  ret = ret + "9";
				}
			      }
			    }
			  }
			}
		      }
		    }
		  }
		}

		num = num / 10;
		ndigits = ndigits - 1;
	}

	return reverseString(ret);
}

fn len(string s) -> int
{
	int acc = 0;
	for (string c : s) {
		acc = acc + 1;
	}

	return acc;
}

fn printString(string s) -> void
{
	syscall(1, 0, s, len(s));
}

fn printInt(int n) -> void
{
	printString(intToStr(n));
}

fn openFile(string filename, int mode) -> int
{
	int fd = syscall(2, filename, mode);

	return fd;
}

fn writeToFile(int fd, string text) -> int
{
	int success = syscall(1, fd, text, len(text));

	return success;
}
